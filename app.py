import os
import time
import requests
from flask import Flask, request

app = Flask(__name__)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ASSISTANT_ID = "asst_wwnwUQESgFERUYhFsEA9Ck0T"
ADMIN_USER_ID = 7346303154  # ID @iSMM02

HEADERS = {
    "Authorization": f"Bearer {OPENAI_API_KEY}",
    "Content-Type": "application/json",
    "OpenAI-Beta": "assistants=v2"
}

# –ü–∞–º—è—Ç—å: user_id ‚Üí thread_id
user_threads = {}
known_users = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    response = requests.post(url, json={"chat_id": chat_id, "text": text})
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")

def get_or_create_thread(user_id):
    if user_id in user_threads:
        return user_threads[user_id]

    response = requests.post("https://api.openai.com/v1/threads", headers=HEADERS)
    data = response.json()
    if "id" not in data:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thread: {data}")
    thread_id = data["id"]
    user_threads[user_id] = thread_id
    return thread_id

def notify_admin_if_new_user(user_data):
    user_id = user_data["id"]
    if user_id not in known_users:
        known_users.add(user_id)

        first_name = user_data.get("first_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        username = user_data.get("username", "‚Äî")
        msg = (
            f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ @ai_ben_bot:\n"
            f"ID: {user_id}\n"
            f"–ò–º—è: {first_name}\n"
            f"Username: @{username}" if username != "‚Äî" else f"Username: ‚Äî"
        )
        send_message(ADMIN_USER_ID, msg)

def ask_openai(prompt, user_id="debug-user"):
    try:
        thread_id = get_or_create_thread(user_id)

        requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=HEADERS,
            json={"role": "user", "content": prompt}
        )

        run = requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/runs",
            headers=HEADERS,
            json={
                "assistant_id": ASSISTANT_ID,
                "instructions": (
                    "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ Benefitsar. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∑–Ω–∞–Ω–∏—è –∏–∑ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. "
                    "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –ø—Ä—è–º–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."
                )
            }
        ).json()

        if "id" not in run:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ run: {run}"
        run_id = run["id"]

        while True:
            status = requests.get(
                f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                headers=HEADERS
            ).json()
            if status["status"] == "completed":
                break
            elif status["status"] == "failed":
                return f"‚ùå Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {status}"
            time.sleep(1)

        response = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=HEADERS
        ).json()

        return response["data"][0]["content"][0]["text"]["value"]

    except Exception as e:
        return f"‚ùå OpenAI API error: {e}"

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    message = data.get("message")
    if not message:
        return {"ok": True}

    user_data = message["from"]
    text = message.get("text")
    if not text:
        return {"ok": True}

    chat_id = message["chat"]["id"]
    user_id = user_data["id"]

    try:
        notify_admin_if_new_user(user_data)
        reply = ask_openai(text, user_id)
        send_message(chat_id, reply)
    except Exception as e:
        send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")

    return {"ok": True}

@app.route("/", methods=["GET"])
def home():
    return "Bot is running with Assistants API v2 and admin notification.", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
