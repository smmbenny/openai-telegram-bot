import os
import time
import requests
from flask import Flask, request

app = Flask(__name__)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ASSISTANT_ID = "asst_wwnwUQESgFERUYhFsEA9Ck0T"

HEADERS = {
    "Authorization": f"Bearer {OPENAI_API_KEY}",
    "Content-Type": "application/json",
    "OpenAI-Beta": "assistants=v2"
}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º thread_id –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_threads = {}

def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    response = requests.post(url, json={"chat_id": chat_id, "text": text})
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")

def get_or_create_thread(user_id):
    if user_id in user_threads:
        print(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º thread_id –¥–ª—è user_id {user_id}")
        return user_threads[user_id]

    response = requests.post("https://api.openai.com/v1/threads", headers=HEADERS)
    data = response.json()
    print("üßµ Thread —Å–æ–∑–¥–∞–Ω:", data)

    if "id" not in data:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thread: {data}")

    thread_id = data["id"]
    user_threads[user_id] = thread_id
    return thread_id

def ask_openai(prompt, user_id="debug-user"):
    try:
        print(f"üëâ –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {prompt}")
        thread_id = get_or_create_thread(user_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=HEADERS,
            json={"role": "user", "content": prompt}
        ).json()
        print("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:", msg)

        # –ó–∞–ø—É—Å–∫ run
        run = requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/runs",
            headers=HEADERS,
            json={
                "assistant_id": ASSISTANT_ID,
                "instructions": (
                    "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ Benefitsar. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∑–Ω–∞–Ω–∏—è –∏–∑ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. "
                    "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –ø—Ä—è–º–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."
                )
            }
        ).json()
        print("üèÉ –ó–∞–ø—É—Å–∫ run:", run)

        if "id" not in run:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ run: {run}"

        run_id = run["id"]

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
        while True:
            status = requests.get(
                f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                headers=HEADERS
            ).json()
            print("‚è≥ –°—Ç–∞—Ç—É—Å:", status)
            if status["status"] == "completed":
                break
            elif status["status"] == "failed":
                return f"‚ùå –û—à–∏–±–∫–∞ run: {status}"
            time.sleep(1)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=HEADERS
        ).json()
        print("üì¨ –û—Ç–≤–µ—Ç OpenAI:", response)

        return response["data"][0]["content"][0]["text"]["value"]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ask_openai: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print("üì© –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:", data)

    message = data.get("message")
    if not message:
        return {"ok": True}

    text = message.get("text")
    if not text:
        return {"ok": True}

    chat_id = message["chat"]["id"]
    user_id = message["from"]["id"]

    try:
        reply = ask_openai(text, user_id)
        send_message(chat_id, reply)
    except Exception as e:
        send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook:
