import os
import time
import requests
from flask import Flask, request

app = Flask(__name__)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ASSISTANT_ID = "asst_wwnwUQESgFERUYhFsEA9Ck0T"

HEADERS = {
    "Authorization": f"Bearer {OPENAI_API_KEY}",
    "Content-Type": "application/json"
}

# –ü–∞–º—è—Ç—å: —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º user_id Telegram ‚Üí thread_id OpenAI
user_threads = {}

def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    requests.post(url, json={"chat_id": chat_id, "text": text})

def ask_openai(prompt, user_id):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π thread –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        thread_id = user_threads.get(user_id)

        if not thread_id:
            thread_response = requests.post("https://api.openai.com/v1/threads", headers=HEADERS)
            thread_id = thread_response.json()["id"]
            user_threads[user_id] = thread_id
            print(f"üß† –ù–æ–≤—ã–π thread_id –¥–ª—è user_id {user_id}: {thread_id}")
        else:
            print(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π thread_id: {thread_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread
        requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=HEADERS,
            json={"role": "user", "content": prompt}
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run_response = requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/runs",
            headers=HEADERS,
            json={"assistant_id": ASSISTANT_ID}
        ).json()

        run_id = run_response["id"]

        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
        while True:
            status_response = requests.get(
                f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                headers=HEADERS
            ).json()
            if status_response["status"] == "completed":
                break
            elif status_response["status"] == "failed":
                return "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
            time.sleep(1)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
        messages_response = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=HEADERS
        ).json()
        last_message = messages_response["data"][0]["content"][0]["text"]["value"]

        return last_message

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Assistants API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print("üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", data)

    message = data.get("message")
    if not message:
        return {"ok": True}

    text = message.get("text")
    if not text:
        return {"ok": True}

    chat_id = message["chat"]["id"]      # –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    user_id = message["from"]["id"]      # –Ω—É–∂–µ–Ω –¥–ª—è –ø–∞–º—è—Ç–∏

    try:
        reply = ask_openai(text, user_id)
        send_message(chat_id, reply)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    return {"ok": True}

@app.route("/", methods=["GET"])
def home():
    return "Bot is running with Assistants API and memory per user_id", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
