import os
import time
import requests
from flask import Flask, request

app = Flask(__name__)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ASSISTANT_ID = "asst_wwnwUQESgFERUYhFsEA9Ck0T"
VECTOR_STORE_ID = "vs_683409c567248191b68fcd34617b51c9"

HEADERS = {
    "Authorization": f"Bearer {OPENAI_API_KEY}",
    "Content-Type": "application/json",
    "OpenAI-Beta": "assistants=v2"
}

def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    response = requests.post(url, json={"chat_id": chat_id, "text": text})
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")

def ask_openai(prompt, user_id="debug-user"):
    try:
        print("üëâ –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", prompt)

        # –°–æ–∑–¥–∞–Ω–∏–µ thread
        thread_response = requests.post("https://api.openai.com/v1/threads", headers=HEADERS)
        thread_data = thread_response.json()
        print("üßµ Thread —Å–æ–∑–¥–∞–Ω:", thread_data)

        if "id" not in thread_data:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ thread: {thread_data}"

        thread_id = thread_data["id"]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_response = requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=HEADERS,
            json={"role": "user", "content": prompt}
        )
        message_data = message_response.json()
        print("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", message_data)

        if message_response.status_code != 200:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data}"

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º file_search
        run_response = requests.post(
            f"https://api.openai.com/v1/threads/{thread_id}/runs",
            headers=HEADERS,
            json={
                "assistant_id": ASSISTANT_ID,
                "instructions": "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —É—Å–ª—É–≥–∞–º Benefitsar. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–Ω–∏—è –∏–∑ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.",
                "tool_resources": {
                    "file_search": {
                        "vector_store_ids": [VECTOR_STORE_ID]
                    }
                },
                "tool_choice": "file_search"
            }
        )
        run_data = run_response.json()
        print("üèÉ –ó–∞–ø—É—Å–∫ run:", run_data)

        # üîç –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ required_action
        if "required_action" not in run_data:
            print("‚ö†Ô∏è file_search –ù–ï –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è ‚Äî required_action –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚úÖ file_search –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:", run_data["required_action"])

        if "id" not in run_data:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ run: {run_data}"

        run_id = run_data["id"]

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
        while True:
            status_response = requests.get(
                f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                headers=HEADERS
            )
            status_data = status_response.json()
            print("‚è≥ –°—Ç–∞—Ç—É—Å run:", status_data)

            if status_data["status"] == "completed":
                break
            elif status_data["status"] == "failed":
                return f"‚ùå Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {status_data}"
            time.sleep(1)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        messages_response = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers=HEADERS
        )
        messages_data = messages_response.json()
        print("üì¨ –û—Ç–≤–µ—Ç OpenAI:", messages_data)

        last_message = messages_data["data"][0]["content"][0]["text"]["value"]
        return last_message

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ask_openai: {e}")
        return f"‚ùå OpenAI API error: {e}"

@app.route("/webhook", methods=["POST"])
def webhook():
    print("üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
    data = request.get_json()
    print("üì© JSON:", data)

    message = data.get("message")
    if not message:
        return {"ok": True}

    text = message.get("text")
    if not text:
        return {"ok": True}

    chat_id = message["chat"]["id"]
    user_id = message["from"]["id"]

    try:
        reply = ask_openai(text, user_id)
        send_message(chat_id, reply)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook:", e)
        send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. {e}")

    return {"ok": True}

@app.route("/", methods=["GET"])
def home():
    return "Bot is running with Assistants API v2 and forced file_search.", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
